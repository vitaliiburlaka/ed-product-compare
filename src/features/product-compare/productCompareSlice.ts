import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'
import { RootState } from '../../app/store'
import { fetchProducts } from './productsAPI'

// Better to have the data model in English keys,
// which makes it easier to translate later
export interface Product {
  Toepassing: string
  salePrice: string // Number
  manufacturerName: string
  Hardheid: string
  grossPrice: string // Number
  BUP_UOM: string
  Artikelnummer: string
  stepQuantity: string // Number
  BUP_Value: string
  badges: string
  uom: string
  Kleur: string
  productImage: string
  Temperatuurgebied: string
  BUP_Conversion: string
  minQuantity: string // Number
  manufacturerImage: string
  name: string
  Materiaal: string
  sku: string
  Snoerdikte: string // Number
  'Inwendige diameter': string // Number
  'Maat volgens AS568': string // Number
  listPrice: string // Number
  channel: string
  display: boolean
  atp: object
}

export interface ProductCompareState {
  products: Product[]
  status: 'idle' | 'loading' | 'failed'
  error: string | null
  selectedItems: string[]
}

const initialState: ProductCompareState = {
  products: [],
  status: 'idle',
  error: null,
  selectedItems: [],
}

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(fetchProductsAsync())`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchProductsAsync = createAsyncThunk(
  'product-compare/fetchProducts',
  async (param: string | undefined) => {
    const response = await fetchProducts(param)
    // The value we return becomes the `fulfilled` action payload
    return response.data as { products: Product[] }
  }
)

export const productCompareSlice = createSlice({
  name: 'product-compare',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    addToCompare: (state, { payload }) => {
      state.selectedItems.push(payload)
    },
    removeFromCompare: (state, { payload }) => {
      state.selectedItems = state.selectedItems.filter((id) => id !== payload)
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchProductsAsync.pending, (state) => {
        state.status = 'loading'
      })
      .addCase(fetchProductsAsync.fulfilled, (state, action) => {
        state.status = 'idle'
        state.products = action.payload.products
        state.selectedItems = action.payload.products.map(
          (p) => p['Artikelnummer']
        )
      })
      .addCase(fetchProductsAsync.rejected, (state) => {
        state.status = 'failed'
        state.error = 'Oops, something went wrong, please try again later.'
      })
  },
})

export const { addToCompare, removeFromCompare } = productCompareSlice.actions

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.compareProducts.products)`
export const selectCompareProducts = (state: RootState) =>
  state.productCompare.products
export const selectSelectedItems = (state: RootState) =>
  state.productCompare.selectedItems
export const selectProductsFetchStatus = (state: RootState) =>
  state.productCompare.status

export default productCompareSlice.reducer
